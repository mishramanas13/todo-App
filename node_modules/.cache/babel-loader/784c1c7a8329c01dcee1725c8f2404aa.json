{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\todo-app\\\\todo-app\\\\src\\\\components\\\\todoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = props => {\n  _s();\n\n  const [todoItem, setTodoItem] = useState(props.data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: todoItem.isDone,\n      onChange: () => {\n        return setTodoItem({ ...todoItem,\n          isDone: !todoItem.isDone\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: todoItem.task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodoItem, \"ZxSlBUX+npM+f/45s677WRST+w4=\");\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["C:/Users/HP/todo-app/todo-app/src/components/todoItem.jsx"],"names":["React","useState","TodoItem","props","todoItem","setTodoItem","data","isDone","task"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,QAAQ,GAAGC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAYC,WAAZ,IAA2BJ,QAAQ,CAACE,KAAK,CAACG,IAAP,CAAzC;AAKI,sBACI;AAAA,4BACA;AACA,MAAA,IAAI,EAAG,UADP;AAEA,MAAA,OAAO,EAAEF,QAAQ,CAACG,MAFlB;AAGA,MAAA,QAAQ,EAAE,MAAM;AACZ,eAAOF,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAcG,UAAAA,MAAM,EAAG,CAACH,QAAQ,CAACG;AAAjC,SAAD,CAAlB;AACH;AALD;AAAA;AAAA;AAAA;AAAA,YADA,eAQA;AAAA,gBAAOH,QAAQ,CAACI;AAAhB;AAAA;AAAA;AAAA;AAAA,YARA;AAAA,kBADJ;AAYH,CAlBD;;GAAMN,Q;;KAAAA,Q;AAoBN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TodoItem =(props) => {\r\nconst [todoItem , setTodoItem] = useState(props.data);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <> \r\n        <input \r\n        type = \"checkbox\" \r\n        checked={todoItem.isDone} \r\n        onChange={() => {\r\n            return setTodoItem({...todoItem, isDone : !todoItem.isDone});\r\n        }}\r\n        />\r\n        <span>{todoItem.task}</span>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}