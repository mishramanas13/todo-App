{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\todo-app\\\\todo-app\\\\src\\\\components\\\\todoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = props => {\n  _s();\n\n  const [todoItem, setTodoItem] = useState(props.data);\n  const [isDirty, setDirty] = useState(false);\n  useEffect(() => {\n    if (isDirty) {\n      fetch(`http://localhost:8080/api/todoItems/${todoItem.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(todoItem)\n      }).then(response => response.json()).then(data => {\n        setDirty(false);\n        setTodoItem(data);\n      });\n    }\n  }, [todoItem, isDirty]); //it us a hook,whenever the state change \n\n  function updateTask(e) {\n    setTodoItem({ ...todoItem,\n      task: e.target.value\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: todoItem.isDone,\n      onChange: () => {\n        setDirty(true);\n        setTodoItem({ ...todoItem,\n          isDone: !todoItem.isDone\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: todoItem.task,\n      onChange: updateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoItem, \"nJ0KCRq59fgXm0YoB747NqF2duo=\");\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["C:/Users/HP/todo-app/todo-app/src/components/todoItem.jsx"],"names":["React","useEffect","useState","TodoItem","props","todoItem","setTodoItem","data","isDirty","setDirty","fetch","id","method","headers","body","JSON","stringify","then","response","json","updateTask","e","task","target","value","isDone"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,QAAQ,GAAGC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAYC,WAAZ,IAA2BJ,QAAQ,CAACE,KAAK,CAACG,IAAP,CAAzC;AACA,QAAM,CAAEC,OAAF,EAAaC,QAAb,IAAyBP,QAAQ,CAAC,KAAD,CAAvC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGO,OAAH,EAAY;AACZE,MAAAA,KAAK,CAAE,uCAAsCL,QAAQ,CAACM,EAAG,EAApD,EAAsD;AACvDC,QAAAA,MAAM,EAAE,KAD+C;AAEvDC,QAAAA,OAAO,EAAE;AACL,0BAAe;AADV,SAF8C;AAKvDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,QAAf;AALiD,OAAtD,CAAL,CAOCY,IAPD,CAOOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPpB,EAQCF,IARD,CAQOV,IAAD,IAAS;AACXE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAH,QAAAA,WAAW,CAACC,IAAD,CAAX;AACH,OAXD;AAYC;AACJ,GAfQ,EAeN,CAACF,QAAD,EAAUG,OAAV,CAfM,CAAT,CAJ2B,CAmBJ;;AAEvB,WAASY,UAAT,CAAoBC,CAApB,EAAsB;AAClBf,IAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAciB,MAAAA,IAAI,EAAGD,CAAC,CAACE,MAAF,CAASC;AAA9B,KAAD,CAAX;AACH;;AAEG,sBACI;AAAA,4BACA;AACA,MAAA,IAAI,EAAG,UADP;AAEA,MAAA,OAAO,EAAEnB,QAAQ,CAACoB,MAFlB;AAGA,MAAA,QAAQ,EAAE,MAAM;AACZhB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAH,QAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAcoB,UAAAA,MAAM,EAAG,CAACpB,QAAQ,CAACoB;AAAjC,SAAD,CAAX;AACH;AAND;AAAA;AAAA;AAAA;AAAA,YADA,eASA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEpB,QAAQ,CAACiB,IAAnC;AAAyC,MAAA,QAAQ,EAAEF;AAAnD;AAAA;AAAA;AAAA;AAAA,YATA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAtCD;;GAAMjB,Q;;KAAAA,Q;AAwCN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst TodoItem =(props) => {\r\nconst [todoItem , setTodoItem] = useState(props.data);\r\nconst [ isDirty ,  setDirty] = useState(false);\r\n\r\nuseEffect(() => {\r\n    if(isDirty) {\r\n    fetch(`http://localhost:8080/api/todoItems/${todoItem.id}`,{\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"content-type\":\"application/json\",\r\n        },\r\n        body: JSON.stringify(todoItem),\r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) =>{\r\n        setDirty(false);\r\n        setTodoItem(data);\r\n    });\r\n    }\r\n}, [todoItem,isDirty]) //it us a hook,whenever the state change \r\n\r\nfunction updateTask(e){\r\n    setTodoItem({...todoItem, task : e.target.value});\r\n}\r\n\r\n    return (\r\n        <div> \r\n        <input \r\n        type = \"checkbox\" \r\n        checked={todoItem.isDone} \r\n        onChange={() => { \r\n            setDirty(true);\r\n            setTodoItem({...todoItem, isDone : !todoItem.isDone});\r\n        }}\r\n        />\r\n        <input type='text' value={todoItem.task} onChange={updateTask}/>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}